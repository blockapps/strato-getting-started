#!/usr/bin/env python

import json
import os
import re
import shutil
import socket
import sys

from subprocess import check_output

node_list_file = 'node-list.json'
output_directory = 'my-node-scripts'

def format_script(address, ip, host, boot_node_ip, prvkey, vals, oauth, parameters):
    host = host.strip()
    output = """\
    #!/usr/bin/env sh
    # Address: {0}
    # IP: {1}
    export NODE_HOST="{host}" 
    export blockstanbulPrivateKey="{4}" """
    # Single node deployment workaround - remove BOOT_NODE_IP line
    if boot_node_ip:
        output.extend(["export BOOT_NODE_IP='{3}'".format(boot_node_ip.strip())])
    if validators:
      output.extend(["export validators='{vals}".format(json.dumps(vals, separators=(',', ':')))])
   # Add Oauth parameters
    if oauth:
      output.extend(["export {0}='{1}'".format(k, v) for k, v in oauth.iteritems()])

   # Add other parameters
    if parameters:
      output.extend(["export {0}='{1}'".format(k, v) for k, v in parameters.iteritems()])

    output.append("./strato --blockstanbul")
    print '\n'.join(output)
    return output


def get_strato_image_name():
    if 'STRATO_IMAGE' in os.environ:
        strato_image = os.environ['STRATO_IMAGE']
    else:
        try:
            strato_img_dc_line = next(line for line in open("docker-compose.yml") if 'STRATO_IMAGE' in line)
            strato_image = re.search(':-(.*)}', strato_img_dc_line).group(1)
        except:
            print(
                'Error: Unable to read strato image name from docker-compose.yml - provide STRATO_IMAGE env var or a valid docker-compose.yml to proceed')
            sys.exit(1)
    print('STRATO image used: {0}'.format(strato_image))
    return strato_image

def process_records(records):
    processed_records = []
    for record in records:
        if 'ip' not in record:
            if 'host' not in record:
                raise ValueError('ERROR: node record does not have neither host nor ip: {0}'.format(json.dumps(record)))
            else:
                try:
                    record['ip'] = socket.gethostbyname(record['host'])
                    print('IP address of {0} was resolved as {1}'.format(record['host'], record['ip']))
                except Exception, e:
                    print('ERROR: Failed to resolve IP of host `{0}`. Error message: {1}'.format(record['host'], e))
                    sys.exit(4)
        elif 'host' not in record:
            record['host'] = record['ip']
        processed_records.append(record)
    return processed_records

if __name__ == "__main__":
    try:
        with open(node_list_file) as file:
            node_records = json.load(file)
    except:
        print('Error: Unable to parse JSON in {0}'.format(node_list_file))
        sys.exit(2)
    if not node_records:
        print('ERROR: no nodes found in {0}'.format(node_list_file))
        sys.exit(3)
    num_hosts = len(node_records)

    nodes = process_records(node_records)
    print('Resulting node list: {0}'.format(json.dumps(nodes)))

    common_boot_ip = nodes[0]['ip'] if num_hosts > 1 else None
    other_boot_ip = nodes[1]['ip'] if num_hosts > 1 else None
    strato_image = get_strato_image_name()
    keys_bytes = check_output(["docker", "run", "--entrypoint=keygen", strato_image, "--count={0}".format(num_hosts)])
    print(keys_bytes.decode('utf-8'))
    keys_json = json.loads(keys_bytes.decode('utf-8'))

    if os.path.exists(output_directory):
        shutil.rmtree(output_directory)

    validators = keys_json['all_validators']

    for (node, key_address_pair) in zip(nodes, keys_json['key_address_pairs']):
        node_dir = os.path.join(output_directory, node['host'].strip())
        os.makedirs(node_dir)
        file_path = os.path.join(node_dir, 'run.sh')
        with open(file_path, 'w') as file:
            file.write(
                format_script(
                    key_address_pair['address'],
                    node['ip'],
                    node['host'],
                    common_boot_ip if node['ip'] != common_boot_ip else other_boot_ip,
                    key_address_pair['private_key'],
                    validators,
                    node['oauth'],
                )
            )
        os.chmod(file_path, 0775)

    print('Successfully finished. Check {0}/ directory for scripts'.format(output_directory))
