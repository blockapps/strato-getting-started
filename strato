#!/usr/bin/env bash
set -e

Red='\033[0;31m'
Yellow='\033[0;33m'
BYellow='\033[1;33m'
NC='\033[0m'

mode=${STRATO_GS_MODE:="0"}
node_type=multi
blockstanbul=${blockstanbul:-false}

function outputLogo {
echo "
    ____  __           __   ___
   / __ )/ /___  _____/ /__/   |  ____  ____  _____
  / __  / / __ \/ ___/ //_/ /| | / __ \/ __ \/ ___/
 / /_/ / / /_/ / /__/ ,< / ___ |/ /_/ / /_/ (__  )
/_____/_/\____/\___/_/|_/_/  |_/ .___/ .___/____/
                              /_/   /_/
"
}

function help {
  outputLogo
  echo -e "${BYellow}STRATO run script${NC}
Kickstart the STRATO node.

${Yellow}Alternative entrypoints:${NC}
The entrypoints are mutually exclusive.
Provide no entrypoint to start STRATO node.
--help|-h   - this help;
--stop      - stop STRATO containers (keeps containers and volumes);
--start     - start the existing STRATO containers after they were stopped (the opposite to --stop)
--remove    - stop and remove STRATO containers but keep volumes (useful for STRATO upgrade - to resync with network);
--wipe      - stop and remove STRATO containers and wipe out volumes;
--compose   - fetch the latest stable docker-compose.yml;
--pull      - pull images used in docker-compose.yml;
--scriptgen - generate kickstart script files for PBFT-blockstanbul nodes based on node list in node-list.json
--keygen=N  - alternative way to generate keys for PBFT-blockstanbul - generate and output N private keys and their addresses;

${Yellow}Optional flags for STRATO:${NC}
--single              - run the single PBFT-blockstanbul node
--lazy                - run the the lazy mining node (single);
--blockstanbul|--pbft - run the PBFT-blockstanbul node - equal to env var blockstanbul=true; requires additional env vars (blockstanbulPrivateKey, validators)

${Yellow}Environment variables:${NC}
blockstanbulPrivateKey  - the private key for PBFT-blockstanbul node (ignored for --single; check --keygen=N or --scriptgen to generate)
validators      - the list of validators addresses for PBFT-blockstanbul node (ignored for --single; check --keygen=N or --scriptgen to generate)
NODE_HOST       - (default: localhost) the hostname or IP of the machine (used for APIs and Dashoboard);
BOOT_NODE_IP    - IP address of the boot node to connect to (required for secondary node to discover other peers), ignored when used with --single flag;
HTTP_PORT       - (default: 80) Port for HTTP traffic listener;
HTTPS_PORT      - (default: 443) Port for HTTPS traffic listener; only used with ssl=true;
ssl             - (default: false) [true|false] to run the node with SSL/TLS;
sslCertFileType - (default: crt) [pem|crt] the SSL certificate type and file extension (should be accessible in ./ssl/certs/ while deploying);
authBasic       - (default: true) [true|false] use basic access authentication for dashboard and APIs;
uiPassword      - (default: admin) the basic auth password for 'admin' user, ignored when used with authBasic=false;
EXT_STORAGE_S3_BUCKET             - enables external storage feature; the AWS S3 bucket name to use as the blockchain data external storage;
EXT_STORAGE_S3_ACCESS_KEY_ID      - the access key ID for AWS S3 bucket provided;
EXT_STORAGE_S3_SECRET_ACCESS_KEY  - the secret access key for AWS S3 bucket provided;
OAUTH_ENABLED               - (default: false) [true|false] Enable the OAuth-OpenId functional;
OAUTH_DISCOVERY_URL         - (required if OAUTH_ENABLED=true) OAuth provider's OpenID Connect discovery URL;
OAUTH_CLIENT_ID             - (required if OAUTH_ENABLED=true) Client ID of OAuth provider valid for the future STRATO url (http(s)://<NODE_HOST>:<HTTP_PORT/HTTPS_PORT>);
OAUTH_CLIENT_SECRET         - (required if OAUTH_ENABLED=true) Client Secret for the client ID specified;
OAUTH_JWT_USERNAME_PROPERTY - (default: email) The name of property of JWT access token payload to be used as STRATO user name;
OAUTH_STRATO42_FALLBACK     - (default: false) - STRATO v4.2 OAuth compatibility mode (for older applications);
"
}

function wipe {
  echo -e "${Yellow}Removing STRATO containers and wiping out volumes${NC}"
  docker-compose -f docker-compose.yml -p strato down -v -t 0 --remove-orphans
}

function remove {
  echo -e "${Yellow}Gently stopping and removing STRATO containers, keeping volumes${NC}"
  docker-compose -f docker-compose.yml -p strato down --remove-orphans
}

function stop {
  echo -e "${Yellow}Gently stopping STRATO containers${NC}"
  docker-compose -f docker-compose.yml -p strato stop
}

function start {
  echo -e "${Yellow}Starting the earlier stopped STRATO containers${NC}"
  docker-compose -f docker-compose.yml -p strato start
}

function getCompose {
  echo -e "${Yellow}Downloading the latest stable version of docker-compose.yml${NC}"
  curl -s -L https://github.com/blockapps/strato-getting-started/releases/latest | egrep -o '/blockapps/strato-getting-started/releases/download/.*/docker-compose.yml' | wget --base=http://github.com/ -i - -O docker-compose.yml
}

function pullImages {
  docker-compose pull
}

function keygen {
  if [ ! -f docker-compose.yml ]; then getCompose; fi
  DC_STRATO_IMAGE=$(cat docker-compose.yml | grep "STRATO_IMAGE" | sed -e "s/.*:-//" -e "s/}//")
  docker run --entrypoint=keygen ${STRATO_IMAGE:-$DC_STRATO_IMAGE} --count="$1"
}

function generatePbftScripts {
  python scriptgen.py
}

if [ ! -f $(pwd)/strato.sh ]; then
    echo -e "${Red}Should be run from within the strato-getting-started directory. Exit.${NC}"
    exit 4
fi

if ! docker ps &> /dev/null
then
    echo -e "${Red}Error: docker is required to be installed and configured for non-root users: https://www.docker.com/${NC}"
    exit 1
fi

if ! docker-compose -v &> /dev/null
then
    echo -e "${Red}Error: docker-compose is required: https://docs.docker.com/compose/install/"
    exit 2
fi

STRATOGS_REQUIRED_VERSION=$(grep strato-getting-started-min-version docker-compose.yml | awk -F":" '{print $NF}')
if [ ${STRATOGS_REQUIRED_VERSION} ]; then
  if awk -v VER=$(<VERSION) -v REQ_VER=${STRATOGS_REQUIRED_VERSION} 'BEGIN { if (VER < REQ_VER) { exit 0 } else { exit 1 }}'
  then
      echo -e "${Red}The STRATO version from docker-compose.yml is incompatible with this strato-getting-started. Please update to v${STRATOGS_REQUIRED_VERSION}."
      exit 12
  fi
fi

if [[ -f docker-compose.release.yml || -f docker-compose.release.multinode.yml ]]
then
  echo -e "${Red}docker-compose.release.yml and docker-compose.release.multinode.yml are deprecated. Please remove or rename to docker-compose.yml. Exit.${NC}"
  exit 5
fi

while [ ${#} -gt 0 ]; do
  case "${1}" in
  --help|-h)
    help
    exit 0
    ;;
  --stop)
    stop
    exit 0
    ;;
  --start)
    start
    exit 0
    ;;
  --remove)
    remove
    exit 0
    ;;
  --wipe)
    wipe
    exit 0
    ;;
  --stable)
    echo -e "${Red}--stable flag is deprecated. Exit.${NC}"
    ;;
  -m)
    echo "Mode is set to $2"
    mode="$2"
    shift
    ;;
  --blockstanbul|pbft)
    blockstanbul=true
    ;;
  --single)
    node_type=single
    ;;
  --lazy)
    node_type=lazy
    ;;
  --compose)
    getCompose
    exit 0
    ;;
  --pull)
    pullImages
    exit 0
    ;;
  --keygen=*)
    keygen "${1#*=}"
    exit 0
    ;;
  --keygen)
    echo -e "${Red}'--keygen N' syntax is deprecated. Use '--keygen=N' instead. Exit.${NC}"
    e
    ;;
  --scriptgen)
    generatePbftScripts
    exit 0
    ;;
  *)
    echo -e "${Red}Unknown flag ${1} provided, please check --help. Exit.${NC}"
    exit 7
    ;;
  esac
  shift 1
done

outputLogo

export NODE_HOST=${NODE_HOST:-localhost}
export HTTP_PORT=${HTTP_PORT:-80}
export HTTPS_PORT=${HTTPS_PORT:-443}
export ssl=${ssl:-false}
if [ "$ssl" = true ] ; then
  http_protocol=https
  main_port=${HTTPS_PORT}
else
  http_protocol=http;
  main_port=${HTTP_PORT}
fi
export sslCertFileType=${sslCertFileType:-crt}
export NODE_NAME=${NODE_NAME:-$NODE_HOST}
export authBasic=${authBasic:-true}
export uiPassword=${uiPassword:-}
export STRATO_GS_MODE=${mode}
export SMD_MODE=${SMD_MODE:-enterprise}

# BEGIN # Vars bloc for backwards-compatibility with STRATO 4.2 and older
export BLOC_URL=${BLOC_URL:-${http_protocol}://$NODE_HOST/bloc/v2.2}
export BLOC_DOC_URL=${BLOC_DOC_URL:-${http_protocol}://$NODE_HOST/docs/?url=/bloc/v2.2/swagger.json}
export STRATO_URL=${STRATO_URL:-${http_protocol}://$NODE_HOST/strato-api/eth/v1.2}
export STRATO_DOC_URL=${STRATO_DOC_URL:-${http_protocol}://$NODE_HOST/docs/?url=/strato-api/eth/v1.2/swagger.json}
export CIRRUS_URL=${CIRRUS_URL:-${http_protocol}://$NODE_HOST/cirrus/search}
export APEX_URL=${APEX_URL:-${http_protocol}://$NODE_HOST/apex-api}
# ENDOF # Vars bloc for backwards-compatibility with STRATO 4.2 and older

if [ "$SMD_MODE" = "enterprise" ] && [ -n "${EXT_STORAGE_S3_BUCKET}" ]; then
  if [[ -z ${EXT_STORAGE_S3_ACCESS_KEY_ID} || -z ${EXT_STORAGE_S3_SECRET_ACCESS_KEY} ]]; then
    echo -e "${Red}The external storage S3 bucket name is provided but one of the credentials is empty. Expected all or none of [EXT_STORAGE_S3_BUCKET, EXT_STORAGE_S3_ACCESS_KEY_ID, EXT_STORAGE_S3_SECRET_ACCESS_KEY]. Exit.${NC}"
    exit 6
  fi
fi

if [ "$OAUTH_JWT_VALIDATION_ENABLED" = "true" ]; then
  if [ "$OAUTH_STRATO42_FALLBACK" = "true" ]; then
    echo "Re-assigning 'OAUTH_JWT_VALIDATION_' vars into 'OAUTH_' vars (OAUTH_STRATO42_FALLBACK mode)"
    export OAUTH_ENABLED=${OAUTH_JWT_VALIDATION_ENABLED}
    export OAUTH_DISCOVERY_URL=${OAUTH_JWT_VALIDATION_DISCOVERY_URL}
  else
    echo "${Red}OAUTH_JWT_VALIDATION_ENABLED and OAUTH_JWT_VALIDATION_DISCOVERY_URL variables are deprecated in STRATO v4.3+"
    echo "For compatibility with STRATO v4.2, please use the 'OAUTH_STRATO42_FALLBACK=true' mode"
    echo "For additional help see './strato --help'${NC}"
    exit 11
  fi
fi

echo "" && echo "*** Common Config ***"
echo "NODE_HOST: $NODE_HOST"
echo "HTTP_PORT: $HTTP_PORT"
echo "HTTPS_PORT: $HTTPS_PORT"
echo "ssl: $ssl"
echo "sslCertFileType: $sslCertFileType"
echo "NODE_NAME: $NODE_NAME"
echo "BLOC_URL (for STRATO v4.2 backwards-compatibility): $BLOC_URL"
echo "BLOC_DOC_URL (for STRATO v4.2 backwards-compatibility): $BLOC_DOC_URL"
echo "STRATO_URL (for STRATO v4.2 backwards-compatibility): $STRATO_URL"
echo "STRATO_DOC_URL (for STRATO v4.2 backwards-compatibility): $STRATO_DOC_URL"
echo "CIRRUS_URL (for STRATO v4.2 backwards-compatibility): $CIRRUS_URL"
echo "APEX_URL (for STRATO v4.2 backwards-compatibility): $APEX_URL"
echo "authBasic: $authBasic"
echo "uiPassword: $(if [ -z ${uiPassword} ]; then echo "not set (using default)"; else echo "is set"; fi)"
echo "STRATO_GS_MODE: $STRATO_GS_MODE"
echo "SMD_MODE: $SMD_MODE"
echo "EXT_STORAGE_S3_BUCKET: ${EXT_STORAGE_S3_BUCKET:-not set}"
echo "EXT_STORAGE_S3_ACCESS_KEY_ID: $(if [ -z ${EXT_STORAGE_S3_ACCESS_KEY_ID} ]; then echo "not set"; else echo "is set"; fi)"
echo "EXT_STORAGE_S3_SECRET_ACCESS_KEY: $(if [ -z ${EXT_STORAGE_S3_SECRET_ACCESS_KEY} ]; then echo "not set"; else echo "is set"; fi)"
echo "OAUTH_ENABLED: ${OAUTH_ENABLED:-false}"
echo "OAUTH_DISCOVERY_URL: ${OAUTH_DISCOVERY_URL:-not set}"
echo "OAUTH_CLIENT_ID: $(if [ -z ${OAUTH_CLIENT_ID} ]; then echo "not set"; else echo "is set"; fi)"
echo "OAUTH_CLIENT_SECRET: $(if [ -z ${OAUTH_CLIENT_SECRET} ]; then echo "not set"; else echo "is set"; fi)"
echo "OAUTH_JWT_USERNAME_PROPERTY: ${OAUTH_JWT_USERNAME_PROPERTY:-not set (using default)}"
echo "OAUTH_STRATO42_FALLBACK: ${OAUTH_STRATO42_FALLBACK:-false}"

if [ ${node_type} = lazy ]
then
  echo "" && echo -e "${BYellow}Running single node with lazy mining${NC}"

  if [ ${blockstanbul} = true ]; then
    echo -e "${Red}--lazy is incompatible with blockstanbul. Exit.${NC}"
    exit 10
  fi

  export lazyBlocks=true
  export SINGLE_NODE=true

  echo "*** Lazy node Config ***"
  echo "lazyBlocks: $lazyBlocks"
  echo "SINGLE_MODE: $SINGLE_NODE"

elif [ ${node_type} = single ]
then
  echo "" && echo -e "${BYellow}Running single node with PBFT-blockstanbul${NC}"
  keys_json=$(keygen 1)
  export blockstanbul=true
  export blockstanbulPrivateKey="$(echo "${keys_json}" | grep \"private_key\" | awk -F'"' '{ print $4 }')"
  export validators="[\"$(echo "${keys_json}" | grep \"address\" | awk -F'"' '{ print $4 }')\"]"
  export lazyBlocks=false
  export SINGLE_NODE=true

  echo "*** Single-node Config ***"
  echo "blockstanbul: $blockstanbul"
  echo "blockstanbulPrivateKey: *** (is set)"
  echo "lazyBlocks: $lazyBlocks"
  echo "SINGLE_MODE: $SINGLE_NODE"
  echo "validators: $validators"

else
  if [ ${blockstanbul} = true ]
  then
    echo "" && echo -e "${BYellow}Running node with PBFT-blockstanbul${NC}"

    if [[ -z ${blockstanbulPrivateKey+x} || -z ${validators+x} ]]; then
      echo -e "${Red}blockstanbul requires values in 'blockstanbulPrivateKey' and 'validators'. Check --help for --keygen=N and --scriptgen flags${NC}"
      exit 9
    fi

    export blockstanbul=true
    echo "blockstanbulPrivateKey: *** (is set)"
    echo "validators: $validators"
  else
    echo "" && echo -e "${BYellow}Running node with Proof-of-Work${NC}"

    export miningAlgorithm="SHA"
    export noMinPeers=true # Legacy 0.3.5 support
    export numMinPeers=${numMinPeers:-5}

    echo "miningAlgorithm: $miningAlgorithm"
    echo "noMinPeers(legacy for v0.3.5-): $noMinPeers"
    echo "numMinPeers: $numMinPeers"
  fi

  export lazyBlocks=false
  echo "lazyBlocks: $lazyBlocks"

  BOOT_NODE_IP=${BOOT_NODE_IP:-${BOOT_NODE_HOST}} # Backwards compatibility for old deprecated BOOT_NODE_HOST var name
  if [ -n "$BOOT_NODE_IP" ]
  then
    export bootnode=${BOOT_NODE_IP}
    echo "bootnode: $bootnode"
    if [ ${blockstanbul} != true ]; then
      export useSyncMode=true # sync before mining
      echo "useSyncMode: $useSyncMode"
    fi
  fi
  if [[ -e "genesis-block.json" && -z ${genesis+x} ]]
  then
    export genesisBlock=$(< genesis-block.json)
  fi
fi

echo "" && echo "*** Genesis Block ***"
if [ -z ${genesisBlock+x} ]
then
  echo "Genesis block is not set (using default)"
else
  echo "Using genesis block from genesis-block.json:"
  echo "${genesisBlock}"
fi

# PARAMETERS VALIDATION
if [ ${HTTP_PORT} = ${HTTPS_PORT} ]; then
  echo -e "${Red}Can not bind HTTP and HTTPS listeners to same port (${HTTP_PORT})${NC}"
  exit 7
fi
# Make sure NODE_HOST contains port if custom port is provided
if [ ${main_port} != "80" ] && [ ${main_port} != "443" ] && [[ ${NODE_HOST} != *":${main_port}" ]]; then
  echo -e "${Red}NODE_HOST should contain the port if custom port is set with HTTP_PORT (for non-ssl) or HTTPS_PORT (for ssl). Expected: NODE_HOST=hostname:${main_port}${NC}"
  exit 8
fi
## END OF PARAMETERS VALIDATION

# enable MixPanel metrics
if [ "$mode" != "1" ] ; then curl --silent --output /dev/null --fail --location http://api.mixpanel.com/track/?data=ewogICAgImV2ZW50IjogInN0cmF0b19nc19pbml0IiwKICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJ0b2tlbiI6ICJkYWYxNzFlOTAzMGFiYjNlMzAyZGY5ZDc4YjZiMWFhMCIKICAgIH0KfQ==&ip=1; fi
if [ ! -f docker-compose.yml ]
then
  getCompose
else
  echo -e "${BYellow}Using the existing docker-compose.yml (to download the most recent stable version - remove the file and restart the script)${NC}"
fi

# COMPOSE FILE PRE-PROCESSING
function cleanup {
  rm docker-compose-temp.yml
}
trap cleanup EXIT
if [ "$ssl" != true ]; then
  sed -n '/#TAG_REMOVE_WHEN_NO_SSL/!p' docker-compose.yml > docker-compose-temp.yml
else
  if [ ${HTTPS_PORT} != "443" ]; then
    sed -n '/#TAG_REMOVE_WHEN_SSL_CUSTOM_HTTPS_PORT/!p' docker-compose.yml > docker-compose-temp.yml
  else
    cp docker-compose.yml docker-compose-temp.yml
  fi
fi
# END OF COMPOSE FILE PRE-PROCESSING

docker-compose -f docker-compose-temp.yml -p strato up -d --remove-orphans
